version: '3'

services:
  server:
    build:
      context: server
      dockerfile: ../Dockerfile
    command: npm start
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    volumes:
      - ./server:/usr/app
      - /usr/app/node_modules
    depends_on:
      database:
        condition: service_healthy
    environment:
      PORT: ${SERVER_PORT}
      # Mettez à jour la ligne ci-dessous pour utiliser la chaîne de connexion MongoDB
      DATABASE_URL: mongodb://${DATABASE_USER}:${DATABASE_PASSWORD}@141.94.246.196:27017/${DATABASE_NAME}

  client:
    build:
      context: client
      dockerfile: ../Dockerfile
    command: npm run dev
    ports:
      - 5173:5173
    volumes:
      - type: bind
        source: ./client
        target: /usr/app
      - /usr/app/node_modules
    depends_on:
      - server

  database:
    # Utilisez l'image officielle de MongoDB
    image: mongo:latest
    environment:
      # MongoDB utilise ces variables pour la création initiale d'un utilisateur et d'une base de données
      MONGO_INITDB_ROOT_USERNAME: ${DATABASE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${DATABASE_PASSWORD}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME}
    # MongoDB n'a pas un système de healthcheck intégré comme pg_isready dans PostgreSQL
    # Vous pouvez ajouter vos propres scripts de vérification si nécessaire
    volumes:
      - mongodb_data:/data/db

    healthcheck:
      test: [ "CMD", "sh", "-c", "nc -z 127.0.0.1 27017" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  mongodb_data:
